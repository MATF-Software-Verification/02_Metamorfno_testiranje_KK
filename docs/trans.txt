MTK je aplikacija za metamorfno testiranje kompilatora, po čemu je i dobila naziv. Njen značajan deo čini transformator, čiji je cilj da generiše semantički ekvivalentne programe od nekog ulaznog. Za implementaciju transformacija korišćen je Clangov aplikativni programski interfejs prema apstraktnom sintaksnom stablu, a zatim je provereno da li se izvršivi kod sa optimizacijama isto ponaša.

Zavisnosti za transformator su clang-11, libclang-11-dev, llvm-11-dev. Neophodno je imati prevodilac Clang 11, kao i biblioteku (LibClang) i LLVM iste verzije, koja je najnovija stabilna u vreme pisanja rada. Za izgradnju se preporučuje upotreba sistema CMake, pomoću dostupne datoteke CMakeLists.txt. Primeri pokretanja i upotrebe izvršive verzije dati su u nastavku.

Prva implementirana transformacija je izmena petlji. Program transformiše sve petlje u C kodu u željeni tip – for, while, do-while. Za te potrebe koriste se klase Do2ForVisitor, For2DoVisitor, For2WhileVisitor, PrepForVisitor, While2DoVisitor i While2ForVisitor. Klasa PrepForVisitor priprema for petlje za dobru zamenu naredbe continue, dok ostale sprovode odgovarajuće transformacije. Tačne sheme izmena moguće je videti u svakom cpp fajlu.

Primer pokretanja (testiranja) transformatora:
./trans <ulaz> <izlaz> <do|while|for>
./trans whilefor.c samodo.c do

Na ovaj način će na osnovu koda whilefor.c biti formiran kod samodo.c koji sadrži isključivo petlje tipa do-while.

Sledeća implementirana transformacija je odmotavanje petlji. Program odmotava (unroll, unwind) petlje u C kodu, umnožavajući im telo n puta. Za te potrebe koristi se klasa LoopUnrollVisitor, čija se shema rada može videti u odgovarajućem cpp fajlu.

Primer pokretanja (testiranja) transformatora:
./trans <ulaz> <izlaz> o<n: uint>
./trans jednostruke.c trostruke.c o2

Na ovaj način će na osnovu koda jednostruke.c biti formiran kod trostruke.c u kome je telo svake petlje utrostručeno (dvaput odmotano).

Treća implementirana transformacija je izmena uslova. Program transformiše sve uslove u C kodu u željeni tip – if-then-else, switch-case-default. Za te potrebe koriste se klase PrepIfVisitor, PrepIffVisitor, PrepSwitchVisitor, If2SwitchVisitor i Switch2IfVisitor. Prve tri pripremaju if i switch naredbe za dobru zamenu naredbi break i continue, dok preostale sprovode odgovarajuće transformacije. Tačne sheme izmena moguće je videti u svakom cpp fajlu.

Primer pokretanja (testiranja) programa:
./trans <ulaz> <izlaz> <if|switch>
./trans ifswitch.c samoif.c if

Na ovaj način će na osnovu koda ifswitch.c biti formiran kod samoif.c koji sadrži isključivo uslove tipa if-then-else.

Pretposlednja implementirana transformacija je izmena rekurzije. Program transformiše svu kontrolu toka sa repnim ponavljanjem u C kodu u željeni tip – iteracija, rekurzija. Za te potrebe koriste se klase Iter2RekVisitor, Rek2IterVisitor, FinIterVisitor i FinRekVisitor. Prve dve sprovode odgovarajuće transformacije, dok druge dve sprovode završne dorade, kako bi kod ostao sintakno i značenjski ispravan. Tačne sheme izmena moguće je videti u svakom cpp fajlu.

Primer pokretanja (testiranja) programa:
./trans <ulaz> <izlaz> <iter|rek>
./trans rekiter.c samoiter.c iter

Na ovaj način će na osnovu koda rekiter.c biti formiran kod samoiter.c koji sadrži isključivo iterativno repno ponavljanje (petlja tipa while).

Na kraju, peta implementirana transformacija je imputacija koda. Program umeće (imputira) nove AST čvorove u C kod, menjajući pritom svaki n-ti već postojeći. Za te potrebe koristi se klasa CodeImputVisitor, pri čemu umetnuti kod ne menja semantiku polaznog programa, pošto se suštinski ne izvršava.

Primer pokretanja (testiranja) transformatora:
./trans <ulaz> <izlaz> u<n: uint>
./trans normal.c bloated.c u3

Na ovaj način će na osnovu koda normal.c biti formiran kod bloated.c koji sadrži mnogo više koda nego što je to neophodno, umetnunog nakon svake treće naredbe.

Kako je dosad viđeno, sve transformacije dostupne su iz jednog programa, odnosno preko jednog izvršivog fajla. Rad glavne (main) funkcije zasnovan je na pomoćnim klasama MTKContext i MTKTransformer, koje rekurzivno posećuju AST stablo polaznog programa.

